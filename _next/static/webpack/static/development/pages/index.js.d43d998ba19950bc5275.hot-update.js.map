{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d43d998ba19950bc5275.hot-update.js","sources":["webpack:///./src/components/sketchs/background/particleSystem.ts"],"sourcesContent":["import Particle, { getParticles } from \"./particle\";\r\nimport p5 from \"p5\";\r\n\r\nexport type WindowOffset = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nconst switchVelocity = (particleA: Particle, particleB: Particle, p5: p5) => {\r\n  particleA.velocity = p5.createVector(\r\n    particleA.velocity.x * -Math.random() * 10 - particleB.velocity.x,\r\n    particleA.velocity.y * -Math.random() * 10 - particleB.velocity.y\r\n  );\r\n};\r\n\r\nclass ParticleSystem {\r\n  particles: Array<Particle>;\r\n  collision: boolean;\r\n  p5: p5;\r\n  collider: Particle;\r\n  image: any;\r\n  offset: WindowOffset;\r\n\r\n  constructor(p5: p5, offset: WindowOffset) {\r\n    this.particles = getParticles(6, 7, p5, offset);\r\n    this.p5 = p5;\r\n    this.collision = true;\r\n    this.image = p5.loadImage(\"../../../pictures/meFace.png\");\r\n    this.offset = offset;\r\n  }\r\n\r\n  setParticles(amount: number) {\r\n    const diff = amount - this.particles.length;\r\n    if (diff > 0) {\r\n      this.particles = [\r\n        ...this.particles,\r\n        ...getParticles(diff, 7, this.p5, this.offset),\r\n      ];\r\n    } else if (diff < 0) {\r\n      this.particles = this.particles.slice(0, diff);\r\n    }\r\n  }\r\n\r\n  checkColision(\r\n    particleA: Particle,\r\n    particleB: Particle,\r\n    mousePosition?: { x: number; y: number }\r\n  ) {\r\n    let distance;\r\n    if (mousePosition) {\r\n      const { x, y } = mousePosition;\r\n      const realParticlePos = this.p5.createVector(\r\n        particleA.position.x + this.offset.x,\r\n        particleA.position.y + this.offset.y\r\n      );\r\n      const mousePos = this.p5.createVector(x, y);\r\n      distance = realParticlePos.dist(mousePos) / 6;\r\n    } else {\r\n      distance = particleA.position.dist(particleB.position);\r\n    }\r\n    const collided =\r\n      !particleA.collided && distance <= particleA.dimension.width;\r\n\r\n    if (collided) {\r\n      switchVelocity(particleA, particleB, this.p5);\r\n      !!this.collider && switchVelocity(particleB, particleA, this.p5);\r\n      particleA.collided = !!this.collider;\r\n    }\r\n  }\r\n\r\n  update() {\r\n    const { mouseX, mouseY } = this.p5;\r\n    this.particles.map((particle, i) => {\r\n      particle.update(mouseX, mouseY);\r\n      const otherParticles = [\r\n        ...this.particles.slice(0, i),\r\n        ...this.particles.slice(i + 1, this.particles.length),\r\n      ];\r\n      if (this.collider) {\r\n        this.checkColision(particle, this.collider, {\r\n          x: mouseX,\r\n          y: mouseY,\r\n        });\r\n      } else {\r\n        if (this.collision)\r\n          otherParticles.map((other) => this.checkColision(particle, other));\r\n      }\r\n      particle.draw();\r\n    });\r\n    if (this.collider) {\r\n      this.collider.drawCollider(mouseX, mouseY, this.image);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ParticleSystem;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AAIA;AACA;AACA;AAQA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;AAGA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}